rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthentication(){
      return request.auth != null;
    }

    function isUserAuthentication(userId){
      return isAuthentication() && userId == request.auth.uid;
    }

    function isValidUser(user){
      return user.size() == 1
      && 'mail' in user && user.mail is string;
    }

    function isValidSchedule(schedule){
      return schedule.size() == 5
      && 'id' in schedule && schedule.id is string
      && 'name' in schedule && schedule.name is string
      && 'motivate' in schedule && schedule.motivate is int
      && 'startTime' in scheudle && scheudle.startTime is timestamp
      && 'endTime' in schedule && schedule.endTime is timestamp;
    }

    match /users/{userId} {
      allow read: if isUserAuthentication(userId);
      allow create: if isUserAuthentication(userId) &&
      isValidUser(request.resource.data);

      match /schedules/{scheduleId} {
        allow read: if isUserAuthentication(userId);
        allow create: if isUserAuthentication(userId);
        allow update: if isUserAuthentication(userId);
        allow delete: if isUserAuthentication(userId);
      }

      match /completeSchedules/{scheduleId} {
        allow read: if isUserAuthentication(userId);
        allow create: if isUserAuthentication(userId);
        allow update: if isUserAuthentication(userId);
        allow delete: if isUserAuthentication(userId);
      }
    }
  }
}